#!/bin/dash
#
#  photos-http-response-handler
#
# serves photos from Photos.app

# Listens on a port for a query, and forwards it to Apple Photos.
# If the query is the id of a media item in the Photos library,
# that media item is returned. Otherwise Photos performs a search,
# the responses are limited to photos, and one of the results,
# randomly selected, is returned.
#
# If the second element of the path is "open" then Apple Photos
# is also launched, with the media item "spotlighted".
#
#
# requires:  trurl  (available via homebrew)

default_timeout_seconds=1

temp_template=ca.heckman.photos-server.image
stdlog=/dev/stderr

timeout_seconds="${1:-$default_timeout_seconds}"

ERR_PHOTOS_TIMEOUT=143  # this one is not arbitrary, generated by photos
ERR_TIMEOUT=124  # this one is not arbitrary, generated by `timeout` command
ERR_EXPORT=144  # this one is arbitrary

main(){
  awk '{print $2;exit}' | while IFS=/ read -r _ path op _
  do dispatch_request "$path" "$op"
  done
}

dispatch_request(){
  path="$(url_decode "$1")"
  op="$(url_decode "$2")"
  log "path: %s  op: %s\n" "$path" "$op"
  case "$op" in
    "open") open "$path" & serve "$path";; # might be different photos!
      *) serve "$path";;
  esac
}

open(){
  log "launching Apple Photos"
  photos open --timeout 0 "$1";
}

serve(){
	# shellcheck disable=SC2064   # we want tmpdir expanded now!
	tmpdir=$(mktemp -d -t $temp_template) && trap "rm -rf '$tmpdir'" EXIT
  log "tmpdir: %s\n" "$tmpdir"

	# shellcheck disable=SC2086
	# timeout $timeout_seconds photos export --timeout 0 "$1" "$tmpdir" || error $?
	# shellcheck disable=SC2086
	photos export --timeout $timeout_seconds "$1" "$tmpdir" >/dev/null || error $?

	filename="$(a_file_in "$tmpdir")" || error $ERR_EXPORT
	filesize="$(stat -f'%z' "$filename")"
	filetype="$(file -b --mime-type "$filename")"
	basename="$(basename "$filename")"
	echo "HTTP/1.1 200 OK
Content-Type: $filetype
Content-Length: $filesize
Content-Disposition: inline; filename=$basename
"; cat "$filename";
	exit 0
}

error(){
	log 'Error: %s\n' "$1"
	# shellcheck disable=SC2254  # these are integers
	case "$1" in
	$ERR_TIMEOUT|$ERR_PHOTOS_TIMEOUT|$ERR_EXPORT)
		status="500 Internal Server Error"
		filename="error.svg"
		svg="$error_svg";;
	*)
		status="404 Not Found"
		filename="missing.svg"
		svg="$missing_svg";;
	esac
	echo -n "HTTP/1.1 $status
Content-Type: svg+xml
Content-Length: ${#svg}
Content-Disposition: inline; filename=$filename

$svg";
exit 1
}

url_decode(){ trurl --get '{path}' "_._/$1" | sed 's/^.//';}

a_file_in(){
	find "$1" -maxdepth 1 -type f ! -name '.*' 2>/dev/null | grep -F ''
}

missing_svg='<?xml version="1.0" encoding="UTF-8"?>
<!-- old school pixellated netscape broken image icon -->
<!--
  source: https://gist.github.com/diachedelic/cbb7fdd2271afa52435b7d4185e6a4ad
  accessed: 2024-02-12
-->
<svg viewBox="0 0 14 16" version="1.1" xmlns="http://www.w3.org/2000/svg">
  <g id="borders-and-backgrounds">
    <path d="M0,0 L10,0 L10,1 L1,1 L1,15 L2,15 L2,16 L0,16 Z" fill="black"></path>
    <path d="M10,4 l4,0 l0,3 l-1,0 l0,-2 l-3,0 Z" fill="black"></path>
    <path d="M14,16 l0,-6 l-1,0 l0,5 l-5,0 l0,1 Z" fill="black"></path>
    <path d="M12,14 l0,-3 l-1,0 l0,2 l-2,0 l0,1 Z" fill="#bcbcc3"></path>
    <path d="M10,0 l1,0 l0,1 l1,0 l0,1 l1,0 l0,1 l1,0 l0,1 l-1,0 l0,-1 l-1,0 l0,-1 l-1,0 l0,2 l-1,0 Z" fill="#878787">
    </path>
    <path d="M2,2 l8,0 l0,3 l2,0 l0,2 l-4,0 l0,5 l-2,0 l0,1 l-2,0 l0,1 l-2,0 Z" fill="#bcbcc3"></path>
  </g>
  <g id="lefteye">
    <path d="M5,3 l2,0 l0,3 l-3,0 l0,-2 l1,0 l0,1 l1,0 l0,-1 l-1,0 Z" fill="#00891e"></path>
    <path d="M5,4 l1,0 l0,1 l-1,0 Z" fill="#00f248"></path>
    <path d="M7,4 l1,0 l0,2 l-1,0 l0,1 l-2,0 l0,-1 l2,0 Z" fill="black"></path>
  </g>
  <g id="righteye">
    <path d="M8,7 l3,0 l0,2 l-1,0 l0,-1 l-1,0 l0,1 l1,0 l0,1 l-2,0 Z" fill="#0064fb"></path>
    <path d="M9,8 l1,0 l0,1 l-1,0 Z" fill="#00fbfe"></path>
    <path d="M10,9 l1,0 l0,1 l-1,0 Z" fill="#003293"></path>
    <path d="M11,7 l1,0 l0,2 l-1,0 Z" fill="black"></path>
    <path d="M8,10 l2,0 l0,1 l-2,0 Z" fill="black"></path>
  </g>
  <g id="mouth">
    <path d="M3,8 l1,0 l0,1 l1,0 l0,1 l1,0 l0,1 l1,0 l0,1 l-1,0 l0,-1 l-1,0 l0,-1 l-1,0 l0,-1 l-1,0 Z" fill="#ff3900">
    </path>
    <path d="M3,9 l1,0 l0,1 l1,0 l0,1 l1,0 l0,1 l-3,0 Z" fill="#f73ae1"></path>
    <path d="M3,12 l3,0 l0,1 l-3,0 Z" fill="black"></path>
  </g>
</svg>
'
error_svg='<?xml version="1.0" encoding="UTF-8"?>
<!--
hand-coded and shaded svg by Erik Ben Heckman https://erik.heckman.ca
of the original "Sad Mac" icon by Susan Kare https://kareprints.com
-->
<svg viewBox="0 0 37 37" version="1.1" xmlns="http://www.w3.org/2000/svg">
  <g id="shading">
    <path id="mask" fill="#f4f4f4" d="
    M6,4 h25 v26 h-25 z M7,3 h23 v32 h-23 zM8,2 h 21 v 2 h-21 z"></path>
    <path id="screen" fill="#fafafa" d="
    M10,6 h17 v14 h-17 Z"></path>
    <path id="plinth" fill="#ddd" d="
    M8,31 h21 v 3 h-21 Z"></path>
  </g>
  <path id="lines" fill-rule="evenodd" fill="black" d="
    M6,4 h25 v26 h-25 z M7,3 h23 v32 h-23 z M8,2 h 21 v 2 h-21 z M8,31 h21 v 3 h-21 Z
    M10,5 h17 v16 h-17 z M9,6 h19 v14 h-19 Z
    M13,9 h1 v3 h-1 v-1 h3 v1 h-1 v-3 h1 v1 h-3 Z
    M21,9 h1 v3 h-1 v-1 h3 v1 h-1 v-3 h1 v1 h-3 Z
    M16,13 h1 v2 h2 v-2 h1 v1 h-4 Z
    M16,16 h5 v2 h3 v1 h-1 v-2 h-8 v 1 h 1 Z
    M9,26 h2 v1 h-2 Z
    M21,25 h6 v1 h-6 Z"></path>
</svg>
'

# shellcheck disable=SC2059
log(){
  if test -z "$1"
  then cat - >$stdlog
  else { printf -- '-> '; printf -- "$@"; } >$stdlog
  fi
}

main "$@"
