#!/bin/dash
# SPDX-FileCopyrightText: 2024 Erik Ben Heckman
# SPDX-PackageDownloadLocation: git://github.com/heckman/photos-server
# SPDX-License-Identifier: GPL-3.0-only
#
#
#   photos-server
#
#
# Serves photos from Apple Photos.

# Controls an HTTP server that forwards requests to a separate
# handler. Refer to the handler for more details.
#
# The server requires `tcpserver`, and the hanlder needs `trurl`.
# Both are available via HomeBrew.

REQUIREMENTS="grealpath tcpserver trurl"   # all available via homebrew

HTTP_HANDLER="$(dirname "$(grealpath -e "$0")")/../libexec/photos-http-response-handler"

DEFAULT_HOST="127.0.0.1"
DEFAULT_PORT=6330

TCPSERVER_OPTIONS="-v -RHl0" # this will undergo whitespace splitting
TIMEOUT_SECONDS="${2:-1}" # default is 1 second

TCPSERVER_PID_FILE="${TMPDIR}ca.heckman.photos-server.tcpserver.pid"

# redefine host and port if they are defined elsewhere:
#
# I've got an osa script that generates markdown links from
# the current selection in Apple Photos. It need to know the
# url to use, so that information is defined there.
#
if test -f "$HOME/Library/Script Libraries/Photos Commands.scpt"
then
	from_osa_script(){
		/usr/bin/osascript -l JavaScript -e '
			Library("Photos Commands").server_'"$1"'()' 2>/dev/null
	}
	HOST="$(from_osa_script host || echo $DEFAULT_HOST)"
	PORT="$(from_osa_script port || echo $DEFAULT_PORT)"
fi

usage(){ echo "USAGE:

photos-server command [args]

Commands to manage an HTTP server on port $HOST:$PORT.

    start [<timeout>]
    stop
    restart [<timeout>]
    status


	http_response <url> [<timeout>]
		Commands to manage an HTTP server on port $PORT.

The argument timeout, measured in seconds, specifies how long to
wait for Photos.app to return with results of a query. The default
is 1. Set to 0 to disable the timeout, which is not recommended.
"; exit 69; }


main(){ local cmd="$1"; shift
	case "$cmd" in
		start) start "$@" ;;
		stop) stop "$@" ;;
		restart) restart "$@" ;;
		status) status "$@" ;;
		http_response) http_response "$@" ;;
		*) usage ;;
	esac
}

log(){ echo "photo-server: $*"; }
err(){ log "$*" >&2; }

#### server control


start(){
	if is_running
	then
		log "already running"
	else
		# shellcheck disable=SC2086
		tcpserver $TCPSERVER_OPTIONS $HOST $PORT "$HTTP_HANDLER" "$TIMEOUT_SECONDS"&
		echo $! > "$TCPSERVER_PID_FILE"
		pause
		status
	fi
}
pause(){ sleep 0.5; }
stop(){ terminate_process; pause; status; }
restart(){ stop; pause; start "$@";}
status(){
	if is_running
	then
		log running: \
			host: "$HOST", \
			port: "$PORT", \
			pid: "$(cat "$TCPSERVER_PID_FILE")", \
			timeout: "$TIMEOUT_SECONDS"
	else
		log "stopped"
	fi
}

terminate_process(){
	test -f "$TCPSERVER_PID_FILE" || return
	if pkill -F "$TCPSERVER_PID_FILE" 2>/dev/null
	then
		rm "$TCPSERVER_PID_FILE"
		true
		return
	else
		err "invalid pid in pid file: $(cat "$TCPSERVER_PID_FILE")"
		err "removing pid file: $TCPSERVER_PID_FILE"
		rm "$TCPSERVER_PID_FILE"
		false
		return
	fi
}

is_running(){
	if test -f "$TCPSERVER_PID_FILE"
	then
		if pgrep -F "$TCPSERVER_PID_FILE" >/dev/null
		then
			true
			return
		else
			rm "$TCPSERVER_PID_FILE"
		fi
	fi
	false
}


for requirement in $REQUIREMENTS
do
	type "$requirement" >/dev/null || {
		err "missing requirement: $requirement"
		exit 3
		}
done

main "$@"

