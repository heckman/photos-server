#!/bin/dash
#
#  photos-server
#
# Serves photos from Apple Photos.

# Controls an HTTP server that forwards requests to a separate
# handler. Refer to the handler for more details.
#
# The server requires `tcpserver`, and the hanlder needs `trurl`.
# Both are available via HomeBrew.

requirements="grealpath tcpserver trurl"   # all available via homebrew

host="127.0.0.1"
port=6330

tcpserver_options="-v -RHl0" # this will undergo whitespace splitting
timeout_seconds="${2:-1}" # default is 1 second

tcpserver_pid_file="${TMPDIR}ca.heckman.photos-server.tcpserver.pid"

http_handler="$(dirname "$(grealpath -e "$0")")/../libexec/photos-http-response-handler"

stdlog=/dev/stderr


usage(){ echo "USAGE:

photos-server command [args]

    start [<timeout>]
    stop
    restart [<timeout>]
    status
        Commands to manage an HTTP server on port $port.

The argument timeout, measured in seconds, specifies how long to
wait for Photos.app to return with results of a query. The default
is 1. Set to 0 to disable the timeout, which is not recommended.
"; exit 69; }


main(){ local cmd="$1"; shift
	case "$cmd" in
		start) start "$@" ;;
		stop) stop "$@" ;;
		restart) restart "$@" ;;
		status) status "$@" ;;
		http_response) http_response "$@" ;;
		*) usage ;;
	esac
}


#### server control

start(){
	if is_running
	then
		echo "already running"
	else
		# shellcheck disable=SC2086
		tcpserver $tcpserver_options $host $port "$http_handler" "$timeout_seconds"&
		echo $! > "$tcpserver_pid_file"
		pause
		status
	fi
}
pause(){ sleep 0.5; }
stop(){ terminate_process; pause; status; }
restart(){ stop; pause; start "$@";}
status(){
	if is_running
	then
		echo "running: pid: $(cat "$tcpserver_pid_file"), timeout: $timeout_seconds"
	else
		echo "stopped"
	fi
}

terminate_process(){
	test -f "$tcpserver_pid_file" || return
	if pkill -F "$tcpserver_pid_file" 2>/dev/null
	then
		rm "$tcpserver_pid_file"
		true
		return
	else
		printf "invalid pid in pid file: " >&2
		cat "$tcpserver_pid_file" >&2
		echo "removing pid file: $tcpserver_pid_file" >&2
		rm "$tcpserver_pid_file"
		false
		return
	fi
}

is_running(){
	if test -f "$tcpserver_pid_file"
	then
		if pgrep -F "$tcpserver_pid_file" >/dev/null
		then
			true
			return
		else
			rm "$tcpserver_pid_file"
		fi
	fi
	false
}

# shellcheck disable=SC2059
log(){ if test -z "$1"; then cat - >$stdlog; else printf -- "-> $*" >$stdlog; fi; }

for requirement in $requirements
do
	type "$requirement" >/dev/null || {
		echo "missing requirement: $requirement" >&2
		exit 3
		}
done

main "$@"

