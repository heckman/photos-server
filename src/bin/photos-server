#!/bin/dash
# SPDX-FileCopyrightText: 2024 Erik Ben Heckman
# SPDX-PackageDownloadLocation: git://github.com/heckman/photos-server
# SPDX-License-Identifier: GPL-3.0-only
#
#
#   photos-server
#
#
# Serves photos from Apple Photos.

# Controls an HTTP server that forwards requests to a separate
# handler. Refer to the handler for more details.
#
# The server requires `tcpserver`, and the hanlder needs `trurl`.
# Both are available via HomeBrew.

requirements="grealpath tcpserver trurl"   # all available via homebrew

host="127.0.0.1"
port=6330

# redefine host and port if they are defined elsewhere:
if test -f "$HOME/Library/Script Libraries/Photos Commands.scpt"
then
	host="$(/usr/bin/osascript -l JavaScript -e '
		Library("Photos Commands").server_host()' 2>/dev/null || echo $host)"
	port="$(/usr/bin/osascript -l JavaScript -e '
		Library("Photos Commands").server_port()' 2>/dev/null || echo $port)"
fi


tcpserver_options="-v -RHl0" # this will undergo whitespace splitting
timeout_seconds="${2:-1}" # default is 1 second

tcpserver_pid_file="${TMPDIR}ca.heckman.photos-server.tcpserver.pid"

http_handler="$(dirname "$(grealpath -e "$0")")/../libexec/photos-http-response-handler"


usage(){ echo "USAGE:

photos-server command [args]

Commands to manage an HTTP server on port $host:$port.

    start [<timeout>]
    stop
    restart [<timeout>]
    status


	http_response <url> [<timeout>]
		Commands to manage an HTTP server on port $port.

The argument timeout, measured in seconds, specifies how long to
wait for Photos.app to return with results of a query. The default
is 1. Set to 0 to disable the timeout, which is not recommended.
"; exit 69; }


main(){ local cmd="$1"; shift
	case "$cmd" in
		start) start "$@" ;;
		stop) stop "$@" ;;
		restart) restart "$@" ;;
		status) status "$@" ;;
		http_response) http_response "$@" ;;
		*) usage ;;
	esac
}

log(){ echo "photo-server: $*"; }
err(){ log "$*" >&2; }

#### server control


start(){
	if is_running
	then
		log "already running"
	else
		# shellcheck disable=SC2086
		tcpserver $tcpserver_options $host $port "$http_handler" "$timeout_seconds"&
		echo $! > "$tcpserver_pid_file"
		pause
		status
	fi
}
pause(){ sleep 0.5; }
stop(){ terminate_process; pause; status; }
restart(){ stop; pause; start "$@";}
status(){
	if is_running
	then
		log running: \
			host: "$host", \
			port: "$port", \
			pid: "$(cat "$tcpserver_pid_file")", \
			timeout: "$timeout_seconds"
	else
		log "stopped"
	fi
}

terminate_process(){
	test -f "$tcpserver_pid_file" || return
	if pkill -F "$tcpserver_pid_file" 2>/dev/null
	then
		rm "$tcpserver_pid_file"
		true
		return
	else
		err "invalid pid in pid file: $(cat "$tcpserver_pid_file")"
		err "removing pid file: $tcpserver_pid_file"
		rm "$tcpserver_pid_file"
		false
		return
	fi
}

is_running(){
	if test -f "$tcpserver_pid_file"
	then
		if pgrep -F "$tcpserver_pid_file" >/dev/null
		then
			true
			return
		else
			rm "$tcpserver_pid_file"
		fi
	fi
	false
}


for requirement in $requirements
do
	type "$requirement" >/dev/null || {
		err "missing requirement: $requirement"
		exit 3
		}
done

main "$@"

